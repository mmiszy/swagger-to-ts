{"version":3,"file":"index.js","sources":["../dist-src/utils.js","../dist-src/property-mapper.js","../dist-src/v2.js","../dist-src/v3.js","../dist-src/index.js"],"sourcesContent":["export function comment(text) {\n    return `/**\n  * ${text.trim().replace(\"\\n+$\", \"\").replace(/\\n/g, \"\\n  * \")}\n  */\n`;\n}\nexport function fromEntries(entries) {\n    return entries.reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});\n}\nexport function nodeType(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return undefined;\n    }\n    if (Array.isArray(obj[\"x-alternatives\"])) {\n        return \"x-alternatives\";\n    }\n    if (obj[\"$ref\"]) {\n        return \"ref\";\n    }\n    if (Array.isArray(obj.enum)) {\n        return \"enum\";\n    }\n    if (obj.type === \"file\") {\n        return \"file\";\n    }\n    if (obj.type === \"boolean\") {\n        return \"boolean\";\n    }\n    if ([\"binary\", \"byte\", \"date\", \"dateTime\", \"password\", \"string\"].includes(obj.type)) {\n        return \"string\";\n    }\n    if ([\"double\", \"float\", \"integer\", \"number\"].includes(obj.type)) {\n        return \"number\";\n    }\n    if (Array.isArray(obj.anyOf)) {\n        return \"anyOf\";\n    }\n    if (Array.isArray(obj.oneOf)) {\n        return \"oneOf\";\n    }\n    if (obj.type === \"array\" || obj.items) {\n        return \"array\";\n    }\n    return \"object\";\n}\nexport function swaggerVersion(definition) {\n    const { openapi } = definition;\n    if (openapi && parseInt(openapi, 10) === 3) {\n        return 3;\n    }\n    const { swagger } = definition;\n    if (swagger && parseInt(swagger, 10) === 2) {\n        return 2;\n    }\n    throw new Error(`üöè version missing from schema; specify whether this is OpenAPI v3 or v2 https://swagger.io/specification`);\n}\nexport function transformRef(ref) {\n    const parts = ref.replace(/^#\\//, \"\").split(\"/\");\n    return `${parts[0]}[\"${parts.slice(1).join('\"][\"')}\"]`;\n}\nexport function tsArrayOf(type) {\n    return `(${type})[]`;\n}\nexport function tsIntersectionOf(types) {\n    return `(${types.join(\") & (\")})`;\n}\nexport function tsPartial(type) {\n    return `Partial<${type}>`;\n}\nexport function tsUnionOf(types) {\n    return `(${types.join(\") | (\")})`;\n}\n","import { fromEntries } from \"./utils\";\nexport default function propertyMapper(schema, transform) {\n    if (!transform) {\n        return schema;\n    }\n    return JSON.parse(JSON.stringify(schema), (_, node) => {\n        if (!node.properties) {\n            return node;\n        }\n        node.properties = fromEntries(Object.entries(node.properties).map(([key, val]) => {\n            if (val.$ref) {\n                return [key, val];\n            }\n            const schemaObject = val;\n            const property = transform(schemaObject, {\n                interfaceType: schemaObject.type,\n                optional: !Array.isArray(node.required) || node.required.includes(key),\n                description: schemaObject.description,\n            });\n            if (property.optional) {\n                if (Array.isArray(node.required)) {\n                    node.required = node.required.filter((r) => r !== key);\n                }\n            }\n            else {\n                node.required = [...(node.required || []), key];\n            }\n            return [\n                key,\n                {\n                    ...val,\n                    type: property.interfaceType,\n                    description: property.description,\n                },\n            ];\n        }));\n        return node;\n    });\n}\n","import propertyMapper from \"./property-mapper\";\nimport { comment, nodeType, transformRef, tsArrayOf, tsIntersectionOf, tsUnionOf, } from \"./utils\";\nexport const PRIMITIVES = {\n    boolean: \"boolean\",\n    binary: \"string\",\n    byte: \"string\",\n    date: \"string\",\n    dateTime: \"string\",\n    password: \"string\",\n    string: \"string\",\n    double: \"number\",\n    float: \"number\",\n    integer: \"number\",\n    number: \"number\",\n};\nexport default function generateTypesV2(schema, options) {\n    if (!schema.definitions) {\n        throw new Error(`‚õîÔ∏è 'definitions' missing from schema https://swagger.io/specification/v2/#definitions-object`);\n    }\n    const propertyMapped = options\n        ? propertyMapper(schema.definitions, options.propertyMapper)\n        : schema.definitions;\n    function transform(node) {\n        switch (nodeType(node)) {\n            case \"ref\": {\n                return transformRef(node.$ref);\n            }\n            case \"string\":\n            case \"number\":\n            case \"boolean\": {\n                return nodeType(node) || \"any\";\n            }\n            case \"enum\": {\n                return tsUnionOf(node.enum.map((item) => `'${item}'`));\n            }\n            case \"object\": {\n                if ((!node.properties || !Object.keys(node.properties).length) &&\n                    !node.allOf &&\n                    !node.additionalProperties) {\n                    return `{ [key: string]: any }`;\n                }\n                let properties = definitionsToTypes(node.properties || {}, node.required);\n                if (node.additionalProperties) {\n                    properties += `[key: string]: ${nodeType(node.additionalProperties) || \"any\"};\\n`;\n                }\n                return tsIntersectionOf([\n                    ...(node.allOf ? node.allOf.map(transform) : []),\n                    ...(properties ? [`{ ${properties} }`] : []),\n                ]);\n                break;\n            }\n            case \"array\": {\n                return tsArrayOf(transform(node.items));\n            }\n            case \"file\": {\n                return options?.fileType || \"any\";\n            }\n            case \"x-alternatives\": {\n                return tsUnionOf(node[\"x-alternatives\"]?.map(transform) || []);\n            }\n        }\n        return \"\";\n    }\n    function definitionsToTypes(obj, required = []) {\n        if (!obj) {\n            return \"\";\n        }\n        let output = \"\";\n        Object.entries(obj).forEach(([key, value]) => {\n            if (value.description) {\n                output += comment(value.description);\n            }\n            output += `\"${key}\"${!required || !required.includes(key) ? \"?\" : \"\"}: `;\n            output += transform(value);\n            output += \";\\n\";\n        });\n        return output;\n    }\n    function capitalize(str) {\n        return String(str).replace(/^\\w/, (l) => l.toUpperCase());\n    }\n    function pathToTypeName(str) {\n        return capitalize(str\n            .replace(/[\\/\\-{](\\w)/g, (_, letter) => letter.toUpperCase())\n            .replace(/\\W/g, \"\"));\n    }\n    function pathsToTypes(obj) {\n        if (!obj) {\n            return \"\";\n        }\n        let output = \"\";\n        let outputPerPath = \"\";\n        Object.entries(obj).forEach(([path, pathItemObject]) => {\n            outputPerPath += `'${path}': {`;\n            Object.entries(pathItemObject).forEach(([key, operationObject]) => {\n                const method = key;\n                const endpointName = method + pathToTypeName(path);\n                outputPerPath += `${method.toUpperCase()}: {`;\n                if (operationObject.parameters) {\n                    const groupedParameters = Object.values(operationObject.parameters).reduce((params, parameterObject) => {\n                        if (parameterObject.in === \"body\") {\n                            params[parameterObject.in] = parameterObject;\n                        }\n                        else {\n                            const newValue = params[parameterObject.in] || {};\n                            newValue[parameterObject.name] = parameterObject;\n                            params[parameterObject.in] = newValue;\n                        }\n                        return params;\n                    }, {});\n                    Object.entries(groupedParameters).forEach(([key, paramGroup]) => {\n                        if (!paramGroup) {\n                            return;\n                        }\n                        const paramGroupName = key;\n                        const groupNameToTypeName = {\n                            body: \"Body\",\n                            query: \"Query\",\n                            header: \"Headers\",\n                            formData: \"FormData\",\n                            path: \"PathParams\",\n                        };\n                        if (paramGroupName === \"body\") {\n                            output += `${endpointName}Request${groupNameToTypeName[paramGroupName]}: `;\n                            outputPerPath += `request${groupNameToTypeName[paramGroupName]}: `;\n                            output += transform(paramGroup.schema);\n                            outputPerPath += transform(paramGroup.schema);\n                            output += \";\\n\";\n                            outputPerPath += \";\\n\";\n                        }\n                        else {\n                            output += `${endpointName}Request${groupNameToTypeName[paramGroupName]}: `;\n                            outputPerPath += `request${groupNameToTypeName[paramGroupName]}: `;\n                            output += \"{\\n\";\n                            outputPerPath += \"{\\n\";\n                            Object.entries(paramGroup).forEach(([, schema]) => {\n                                const parameterObject = schema;\n                                output += `\"${parameterObject.name}\"${!parameterObject.required ? \"?\" : \"\"}: `;\n                                outputPerPath += `\"${parameterObject.name}\"${!parameterObject.required ? \"?\" : \"\"}: `;\n                                output += transform(parameterObject);\n                                outputPerPath += transform(parameterObject);\n                                output += \";\\n\";\n                                outputPerPath += \";\\n\";\n                            });\n                            output += \"};\\n\";\n                            outputPerPath += \"};\\n\";\n                        }\n                    });\n                }\n                Object.entries(operationObject.responses).forEach(([key, responseObject]) => {\n                    if (!responseObject) {\n                        return;\n                    }\n                    if (\"$ref\" in responseObject) {\n                        return;\n                    }\n                    if (!responseObject.schema) {\n                        return;\n                    }\n                    const responseType = key;\n                    output += \"\\n\";\n                    outputPerPath += \"\\n\";\n                    let descriptionAndSummary = \"\";\n                    if (operationObject.description) {\n                        descriptionAndSummary += `@description ${operationObject.description}`;\n                    }\n                    if (operationObject.summary) {\n                        const responseDescription = responseObject.description || \"\";\n                        if (descriptionAndSummary) {\n                            descriptionAndSummary += \"\\n\";\n                        }\n                        descriptionAndSummary += `@summary ${operationObject.summary} ${responseType} ${responseDescription} response`;\n                    }\n                    if (descriptionAndSummary) {\n                        output += comment(descriptionAndSummary);\n                        outputPerPath += comment(descriptionAndSummary);\n                    }\n                    output += `${endpointName}${capitalize(responseType)}Response: `;\n                    outputPerPath += `response: `;\n                    output += transform(responseObject.schema);\n                    outputPerPath += transform(responseObject.schema);\n                    output += \";\\n\";\n                    outputPerPath += \";\\n\";\n                });\n                outputPerPath += `};`;\n            });\n            outputPerPath += `};`;\n        });\n        return output + \"\\n\" + `pathsDefinitions: { ${outputPerPath} }`;\n    }\n    return `export interface definitions {\n    ${definitionsToTypes(propertyMapped, Object.keys(propertyMapped))}\n    ${pathsToTypes(schema.paths)}\n  }`;\n}\n","import propertyMapper from \"./property-mapper\";\nimport { comment, nodeType, transformRef, tsArrayOf, tsIntersectionOf, tsPartial, tsUnionOf, } from \"./utils\";\nexport const PRIMITIVES = {\n    boolean: \"boolean\",\n    string: \"string\",\n    integer: \"number\",\n    number: \"number\",\n};\nexport default function generateTypesV3(schema, options) {\n    if (!schema.components || !schema.components.schemas) {\n        throw new Error(`‚õîÔ∏è 'components' missing from schema https://swagger.io/specification`);\n    }\n    const propertyMapped = options\n        ? propertyMapper(schema.components.schemas, options.propertyMapper)\n        : schema.components.schemas;\n    function transform(node) {\n        switch (nodeType(node)) {\n            case \"ref\": {\n                return transformRef(node.$ref);\n            }\n            case \"string\":\n            case \"number\":\n            case \"boolean\": {\n                return nodeType(node) || \"any\";\n            }\n            case \"enum\": {\n                return tsUnionOf(node.enum.map((item) => `'${item}'`));\n            }\n            case \"oneOf\": {\n                return tsUnionOf(node.oneOf.map(transform));\n            }\n            case \"anyOf\": {\n                return tsIntersectionOf(node.anyOf.map((anyOf) => tsPartial(transform(anyOf))));\n            }\n            case \"object\": {\n                if ((!node.properties || !Object.keys(node.properties).length) &&\n                    !node.allOf &&\n                    !node.additionalProperties) {\n                    return `{ [key: string]: any }`;\n                }\n                let properties = createKeys(node.properties || {}, node.required);\n                if (node.additionalProperties) {\n                    properties += `[key: string]: ${nodeType(node.additionalProperties) || \"any\"};\\n`;\n                }\n                return tsIntersectionOf([\n                    ...(node.allOf ? node.allOf.map(transform) : []),\n                    ...(properties ? [`{ ${properties} }`] : []),\n                ]);\n            }\n            case \"array\": {\n                return tsArrayOf(transform(node.items));\n            }\n        }\n        return \"\";\n    }\n    function createKeys(obj, required) {\n        let output = \"\";\n        Object.entries(obj).forEach(([key, value]) => {\n            if (value.description) {\n                output += comment(value.description);\n            }\n            output += `\"${key}\"${!required || !required.includes(key) ? \"?\" : \"\"}: `;\n            if (value.nullable) {\n                output += \"(\";\n            }\n            output += transform(value);\n            if (value.nullable) {\n                output += \") | null\";\n            }\n            output += \";\\n\";\n        });\n        return output;\n    }\n    const schemas = `schemas: {\n    ${createKeys(propertyMapped, Object.keys(propertyMapped))}\n  }`;\n    const responses = !schema.components.responses\n        ? ``\n        : `responses: {\n    ${createKeys(schema.components.responses, Object.keys(schema.components.responses))}\n  }`;\n    return `export interface components {\n    ${schemas}\n    ${responses}\n  }`;\n}\n","import path from \"path\";\nimport prettier from \"prettier\";\nimport { swaggerVersion } from \"./utils\";\nimport v2 from \"./v2\";\nimport v3 from \"./v3\";\nexport const WARNING_MESSAGE = `/**\n* This file was auto-generated by swagger-to-ts.\n* Do not make direct changes to the file.\n*/\n\n\n`;\nexport default function swaggerToTS(schema, options) {\n    const version = swaggerVersion(schema);\n    let output = `${WARNING_MESSAGE}`;\n    switch (version) {\n        case 2: {\n            output = output.concat(v2(schema, options));\n            break;\n        }\n        case 3: {\n            output = output.concat(v3(schema, options));\n            break;\n        }\n    }\n    let prettierOptions = { parser: \"typescript\" };\n    if (options && options.prettierConfig) {\n        try {\n            const userOptions = prettier.resolveConfig.sync(path.resolve(process.cwd(), options.prettierConfig));\n            prettierOptions = {\n                ...prettierOptions,\n                ...userOptions,\n            };\n        }\n        catch (err) {\n            console.error(`‚ùå ${err}`);\n        }\n    }\n    return prettier.format(output, prettierOptions);\n}\n"],"names":["comment","text","trim","replace","fromEntries","entries","reduce","obj","key","val","nodeType","undefined","Array","isArray","enum","type","includes","anyOf","oneOf","items","swaggerVersion","definition","openapi","parseInt","swagger","Error","transformRef","ref","parts","split","slice","join","tsArrayOf","tsIntersectionOf","types","tsPartial","tsUnionOf","propertyMapper","schema","transform","JSON","parse","stringify","_","node","properties","Object","map","$ref","schemaObject","property","interfaceType","optional","required","description","filter","r","generateTypesV2","options","definitions","propertyMapped","item","keys","length","allOf","additionalProperties","definitionsToTypes","fileType","output","forEach","value","capitalize","str","String","l","toUpperCase","pathToTypeName","letter","pathsToTypes","outputPerPath","path","pathItemObject","operationObject","method","endpointName","parameters","groupedParameters","values","params","parameterObject","in","newValue","name","paramGroup","paramGroupName","groupNameToTypeName","body","query","header","formData","responses","responseObject","responseType","descriptionAndSummary","summary","responseDescription","paths","generateTypesV3","components","schemas","createKeys","nullable","WARNING_MESSAGE","swaggerToTS","version","concat","v2","v3","prettierOptions","parser","prettierConfig","userOptions","prettier","resolveConfig","sync","resolve","process","cwd","err","console","error","format"],"mappings":"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"}